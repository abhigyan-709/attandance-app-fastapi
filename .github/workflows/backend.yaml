name: Deploy FastAPI to EC2 (Staging)

on:
  push:
    branches:
      - staging-api  # Deploy only when pushing to the staging branch

jobs:
  build-and-deploy-staging:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build and tag Docker image (Staging)
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }} .
        docker tag ${{ secrets.ECR_REPOSITORY }}:staging \
          ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:staging

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:staging

    - name: Deploy Staging on EC2
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
          # Ensure AWS CLI & Docker are installed
          if ! command -v aws &> /dev/null; then sudo apt update && sudo apt install -y awscli; fi
          if ! command -v docker &> /dev/null; then sudo apt update && sudo apt install -y docker.io; fi

          # Login to Amazon ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          # Staging variables
          APP_NAME="staging-attendance-app"
          PORT="8001"
          ENV_FILE="/home/$USER/.env.staging"

          # Pull latest staging image
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:staging

          # Stop and remove old staging container if exists
          docker stop $APP_NAME || true
          docker rm $APP_NAME || true

          # Ensure correct .env file for staging exists
          if [ ! -f "$ENV_FILE" ]; then
            echo "Creating $ENV_FILE..."
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > $ENV_FILE  # Same MongoDB
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $ENV_FILE
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $ENV_FILE
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $ENV_FILE
            echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> $ENV_FILE
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> $ENV_FILE
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> $ENV_FILE
            echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> $ENV_FILE
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> $ENV_FILE
            echo "MAIL_SERVER=${{ secrets.MAIL_SERVER }}" >> $ENV_FILE
            echo "MAIL_STARTTLS=${{ secrets.MAIL_STARTTLS }}" >> $ENV_FILE
            echo "MAIL_SSL_TLS=${{ secrets.MAIL_SSL_TLS }}" >> $ENV_FILE
            echo "MAIL_FROM_NAME=${{ secrets.MAIL_FROM_NAME }}" >> $ENV_FILE
          fi

          # Run the staging container
          docker run -d --name $APP_NAME -p $PORT:8000 \
            --env-file $ENV_FILE \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:staging
        EOF
